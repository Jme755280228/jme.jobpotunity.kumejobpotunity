package jme.jobpotunity.kumejobpotunity.service;

import jme.jobpotunity.kumejobpotunity.entity.ApplicantProfile;
import jme.jobpotunity.kumejobpotunity.entity.ApplicationStatus;
import jme.jobpotunity.kumejobpotunity.entity.JobApplicantResponse;
import jme.jobpotunity.kumejobpotunity.entity.JobApplication;
import jme.jobpotunity.kumejobpotunity.entity.JobPosting;
import jme.jobpotunity.kumejobpotunity.entity.User;
import jme.jobpotunity.kumejobpotunity.repository.JobApplicationRepository;
import jme.jobpotunity.kumejobpotunity.repository.JobApplicantResponseRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import jakarta.persistence.criteria.Join;
import jakarta.persistence.criteria.Predicate;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class JobApplicationService {

    private final JobApplicationRepository jobApplicationRepository;
    private final JobApplicantResponseRepository jobApplicantResponseRepository;

    @Autowired
    public JobApplicationService(JobApplicationRepository jobApplicationRepository,
                                 JobApplicantResponseRepository jobApplicantResponseRepository) {
        this.jobApplicationRepository = jobApplicationRepository;
        this.jobApplicantResponseRepository = jobApplicantResponseRepository;
    }

    /**
     * Job Application ·Ä°·Äû·ÄÖ·Ä∫·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ·ÄÄ·Ä≠·ÄØ Custom Field Responses ·Äô·Äª·Ä¨·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫·Ä°·Äê·Ä∞ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     * @param job JobPosting entity
     * @param user Applicant User entity
     * @param profile ApplicantProfile entity
     * @param responses Custom responses list
     * @param cvPath CV File Path
     * @return Saved JobApplication entity
     */
    @Transactional
    public JobApplication createApplicationWithResponses(JobPosting job, User user, ApplicantProfile profile, List<JobApplicantResponse> responses, String cvPath) {

        // 1. Job Application Entity ·ÄÄ·Ä≠·ÄØ ·Äñ·Äî·Ä∫·Äê·ÄÆ·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        JobApplication application = new JobApplication();
        application.setJob(job);
        application.setUser(user);
        application.setApplicantProfile(profile);
        application.setApplicationDate(LocalDate.now());
        application.setStatus(ApplicationStatus.APPLIED);
        
        // CV File Path ·ÄÄ·Ä≠·ÄØ ·Äë·Ää·Ä∑·Ä∫·Äû·ÄΩ·ÄÑ·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        application.setCvPath(cvPath);

        // 2. Job Application ·ÄÄ·Ä≠·ÄØ ·Ä°·Äõ·ÄÑ·Ä∫·ÄÜ·ÄØ·Ä∂·Ä∏ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏ (ID ·Äõ·Äõ·Äæ·Ä≠·Äõ·Äî·Ä∫)
        JobApplication savedApplication = jobApplicationRepository.save(application);

        // 3. Custom Responses ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ Application ·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÅ·Äª·Ä≠·Äê·Ä∫·ÄÜ·ÄÄ·Ä∫·Äï·Äº·ÄÆ·Ä∏ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        if (responses != null && !responses.isEmpty()) {
            for (JobApplicantResponse response : responses) {
                response.setJobApplication(savedApplication);
                jobApplicantResponseRepository.save(response);
            }
        }

        return savedApplication;
    }
    
    /**
     * Job·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äú·Äª·Äæ·Ä±·Ä¨·ÄÄ·Ä∫·Äë·Ä¨·Ä∏·Äû·Ä∞·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ Status, ·Ä°·Äê·ÄΩ·Ä±·Ä∑·Ä°·ÄÄ·Äº·ÄØ·Ä∂·Äî·Äæ·ÄÑ·Ä∑·Ä∫ Keyword ·Äô·Äª·Ä¨·Ä∏·Äñ·Äº·ÄÑ·Ä∑·Ä∫ ·ÄÖ·ÄÖ·Ä∫·Äë·ÄØ·Äê·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     * (Digital CV (Structured Data) ·ÄÄ·Ä≠·ÄØ ·Ä°·ÄÅ·Äº·Ä±·ÄÅ·Ä∂·Äû·Ä±·Ä¨ Filtering)
     */
    @Transactional(readOnly = true)
    public List<JobApplication> findApplicationsByJobAndFilters(JobPosting job, String status, Integer minExp, String keyword) {

        // 1. String status ·ÄÄ·Ä≠·ÄØ Enum ·Ä°·Äñ·Äº·ÄÖ·Ä∫ ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        ApplicationStatus applicationStatus = null;
        if (status != null && !status.trim().isEmpty()) {
            try {
                applicationStatus = ApplicationStatus.valueOf(status.toUpperCase());
            } catch (IllegalArgumentException e) {
                // Invalid status string, ignore status filter
            }
        }

        // 2. Dynamic Specification ·ÄÄ·Ä≠·ÄØ·Äê·Ää·Ä∫·ÄÜ·Ä±·Ä¨·ÄÄ·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        Specification<JobApplication> spec = buildFilterSpecification(job, applicationStatus, minExp, keyword);

        // 3. Repository ·ÄÄ·Ä≠·ÄØ·ÄÅ·Ä±·Ä´·Ä∫·Äö·Ä∞·Äï·Äº·ÄÆ·Ä∏ Filtering ·Äï·Äº·ÄØ·Äú·ÄØ·Äï·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
        return jobApplicationRepository.findAll(spec);
    }

    // ... (buildFilterSpecification remains the same) ...

    /**
     * üéØ JPA Specification Builder: Dynamic Query Logic ·ÄÄ·Ä≠·ÄØ ·Äê·Ää·Ä∫·ÄÜ·Ä±·Ä¨·ÄÄ·Ä∫·Äû·Ää·Ä∫
     */
    private Specification<JobApplication> buildFilterSpecification(JobPosting job, ApplicationStatus status, Integer minExp, String keyword) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            // 1. Job Filter (MUST be applied)
            predicates.add(criteriaBuilder.equal(root.get("job"), job));

            // 2. Status Filter (Optional)
            if (status != null) {
                predicates.add(criteriaBuilder.equal(root.get("status"), status));
            }

            // 3. Minimum Experience Filter (Optional)
            if (minExp != null && minExp > 0) {
                // Join to ApplicantProfile
                Join<JobApplication, ApplicantProfile> profileJoin = root.join("applicantProfile");
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(profileJoin.get("totalExperienceYears"), minExp));
            }

            // 4. Keyword Search Filter (Optional, Multi-field search)
            if (keyword != null && !keyword.trim().isEmpty()) {
                String searchLike = "%" + keyword.toLowerCase() + "%";
                
                // Join to ApplicantProfile (if not already joined by minExp)
                Join<JobApplication, ApplicantProfile> profileJoin = root.join("applicantProfile");
                
                // Join to JobApplicantResponse
                Join<JobApplication, JobApplicantResponse> responsesJoin = root.join("responses");

                // Create OR conditions for keyword
                Predicate keywordSearch = criteriaBuilder.or(
                    // Search in ApplicantProfile (skills)
                    criteriaBuilder.like(criteriaBuilder.lower(profileJoin.get("skills")), searchLike),
                    // Search in ApplicantProfile (summary)
                    criteriaBuilder.like(criteriaBuilder.lower(profileJoin.get("professionalSummary")), searchLike),
                    // Search in JobApplicantResponse (answerValue)
                    criteriaBuilder.like(criteriaBuilder.lower(responsesJoin.get("answerValue")), searchLike)
                );
                
                predicates.add(keywordSearch);
                
                // NOTE: Query ·Äê·ÄΩ·ÄÑ·Ä∫ Distinct ·Äï·Äº·ÄØ·Äú·ÄØ·Äï·Ä∫·Äõ·Äî·Ä∫ ·Äú·Ä≠·ÄØ·Ä°·Äï·Ä∫·Äû·Ää·Ä∫ (Responses join ·ÄÄ·Äº·Ä±·Ä¨·ÄÑ·Ä∑·Ä∫ Duplication ·Äñ·Äº·ÄÖ·Ä∫·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äû·Ää·Ä∫)
                query.distinct(true);
            }
            
            // Result order: ID descending (Newest applications first)
            query.orderBy(criteriaBuilder.desc(root.get("id")));

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }


    /**
     * üéØ NEW METHOD: ·Äú·Äª·Äæ·Ä±·Ä¨·ÄÄ·Ä∫·Äú·ÄΩ·Äæ·Ä¨·Åè ·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä± (Status) ·ÄÄ·Ä≠·ÄØ ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏·Åã
     * @param applicationId ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äú·Ä≠·ÄØ·Äû·Ä±·Ä¨ ·Äú·Äª·Äæ·Ä±·Ä¨·ÄÄ·Ä∫·Äú·ÄΩ·Äæ·Ä¨·Åè ID
     * @param newStatusName ·Äï·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äú·Ä≤·Äú·Ä≠·ÄØ·Äû·Ä±·Ä¨ ·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä± (String: e.g., "REVIEWING", "INTERVIEW")
     * @return ·Ä°·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äº·ÄÑ·Ä∫·ÄÖ·ÄΩ·Ä¨ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äï·Äº·ÄÆ·Ä∏·Äû·Ä±·Ä¨ JobApplication entity
     * @throws IllegalArgumentException Application ID ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ Status Name ·Äô·Äæ·Ä¨·Ä∏·Äö·ÄΩ·ÄÑ·Ä∫·Ä∏·Äï·Ä´·ÄÄ
     */
    @Transactional
    public JobApplication updateApplicationStatus(Long applicationId, String newStatusName) {
        
        JobApplication application = jobApplicationRepository.findById(applicationId)
            .orElseThrow(() -> new IllegalArgumentException("Invalid application ID: " + applicationId));
        
        try {
            ApplicationStatus newStatus = ApplicationStatus.valueOf(newStatusName.toUpperCase());
            application.setStatus(newStatus);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid status name provided: " + newStatusName);
        }
        
        return jobApplicationRepository.save(application);
    }


    // --- Existing Methods ---

    public Optional<JobApplication> findById(Long id) {
        return jobApplicationRepository.findById(id);
    }

    public Optional<JobApplication> findByIdWithProfile(Long id) {
        return jobApplicationRepository.findByIdWithProfile(id); // Custom fetch join method
    }

    public Optional<JobApplication> findByJobAndUser(JobPosting job, User user) {
        return jobApplicationRepository.findByUserAndJob(user, job);
    }

    public List<JobApplication> findApplicationsByJob(JobPosting job) {
        return jobApplicationRepository.findByJob(job);
    }

    public JobApplication save(JobApplication application) {
        return jobApplicationRepository.save(application);
    }

    /**
     * JobApplication ·Äê·ÄÖ·Ä∫·ÄÅ·ÄØ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ Custom Responses ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Äõ·Äö·Ä∞·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏
     */
    public List<JobApplicantResponse> findResponsesByApplication(JobApplication application) {
        return jobApplicantResponseRepository.findByJobApplication(application);
    }
}


